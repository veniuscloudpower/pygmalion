{"remainingRequest":"C:\\projects\\kube-dashboard\\client\\node_modules\\thread-loader\\dist\\cjs.js!C:\\projects\\kube-dashboard\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\projects\\kube-dashboard\\client\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\projects\\kube-dashboard\\client\\src\\store\\auth.module.js","dependencies":[{"path":"C:\\projects\\kube-dashboard\\client\\src\\store\\auth.module.js","mtime":1626991522236},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import AuthService from \"../services/user.service\";\nvar user = JSON.parse(localStorage.getItem('user'));\nvar initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user: user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport var auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login: function login(_ref, user) {\n      var commit = _ref.commit;\n      return AuthService.login(user.username, user.password).then(function (user) {\n        commit('loginSuccess', user);\n        return Promise.resolve(user);\n      }, function (error) {\n        commit('loginFailure');\n        return Promise.reject(error);\n      });\n    },\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      AuthService.logout();\n      commit('logout');\n    },\n    register: function register(_ref3, user) {\n      var commit = _ref3.commit;\n      return AuthService.register(user).then(function (response) {\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }, function (error) {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n  },\n  mutations: {\n    loginSuccess: function loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure: function loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout: function logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSuccess: function registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure: function registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n  }\n};",{"version":3,"sources":["C:/projects/kube-dashboard/client/src/store/auth.module.js"],"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","username","password","then","Promise","resolve","error","reject","logout","register","response","data","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"mappings":"AAAA,OAAOA,WAAP;AAEA,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,IAAMC,YAAY,GAAGL,IAAI,GACnB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA8BP,EAAAA,IAAI,EAAJA;AAA9B,CADmB,GAEnB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA+BP,EAAAA,IAAI,EAAE;AAArC,CAFN;AAIA,OAAO,IAAMQ,IAAI,GAAG;AAChBC,EAAAA,UAAU,EAAE,IADI;AAEhBC,EAAAA,KAAK,EAAEL,YAFS;AAGhBM,EAAAA,OAAO,EAAE;AACLC,IAAAA,KADK,uBACaZ,IADb,EACmB;AAAA,UAAhBa,MAAgB,QAAhBA,MAAgB;AACpB,aAAOd,WAAW,CAACa,KAAZ,CAAkBZ,IAAI,CAACc,QAAvB,EAAgCd,IAAI,CAACe,QAArC,EAA+CC,IAA/C,CACH,UAAAhB,IAAI,EAAI;AACJa,QAAAA,MAAM,CAAC,cAAD,EAAiBb,IAAjB,CAAN;AACA,eAAOiB,OAAO,CAACC,OAAR,CAAgBlB,IAAhB,CAAP;AACH,OAJE,EAKH,UAAAmB,KAAK,EAAI;AACLN,QAAAA,MAAM,CAAC,cAAD,CAAN;AACA,eAAOI,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACH,OARE,CAAP;AAUH,KAZI;AAaLE,IAAAA,MAbK,yBAac;AAAA,UAAVR,MAAU,SAAVA,MAAU;AACfd,MAAAA,WAAW,CAACsB,MAAZ;AACAR,MAAAA,MAAM,CAAC,QAAD,CAAN;AACH,KAhBI;AAiBLS,IAAAA,QAjBK,2BAiBgBtB,IAjBhB,EAiBsB;AAAA,UAAhBa,MAAgB,SAAhBA,MAAgB;AACvB,aAAOd,WAAW,CAACuB,QAAZ,CAAqBtB,IAArB,EAA2BgB,IAA3B,CACH,UAAAO,QAAQ,EAAI;AACRV,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOI,OAAO,CAACC,OAAR,CAAgBK,QAAQ,CAACC,IAAzB,CAAP;AACH,OAJE,EAKH,UAAAL,KAAK,EAAI;AACLN,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOI,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACH,OARE,CAAP;AAUH;AA5BI,GAHO;AAiChBM,EAAAA,SAAS,EAAE;AACPC,IAAAA,YADO,wBACMhB,KADN,EACaV,IADb,EACmB;AACtBU,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,IAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAaA,IAAb;AACH,KAJM;AAKP2B,IAAAA,YALO,wBAKMjB,KALN,EAKa;AAChBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACH,KARM;AASPqB,IAAAA,MATO,kBASAX,KATA,EASO;AACVA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACH,KAZM;AAaP4B,IAAAA,eAbO,2BAaSlB,KAbT,EAagB;AACnBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACH,KAfM;AAgBPsB,IAAAA,eAhBO,2BAgBSnB,KAhBT,EAgBgB;AACnBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACH;AAlBM;AAjCK,CAAb","sourcesContent":["import AuthService from '../services/user.service';\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\nconst initialState = user\r\n    ? { status: { loggedIn: true }, user }\r\n    : { status: { loggedIn: false }, user: null };\r\n\r\nexport const auth = {\r\n    namespaced: true,\r\n    state: initialState,\r\n    actions: {\r\n        login({ commit }, user) {\r\n            return AuthService.login(user.username,user.password).then(\r\n                user => {\r\n                    commit('loginSuccess', user);\r\n                    return Promise.resolve(user);\r\n                },\r\n                error => {\r\n                    commit('loginFailure');\r\n                    return Promise.reject(error);\r\n                }\r\n            );\r\n        },\r\n        logout({ commit }) {\r\n            AuthService.logout();\r\n            commit('logout');\r\n        },\r\n        register({ commit }, user) {\r\n            return AuthService.register(user).then(\r\n                response => {\r\n                    commit('registerSuccess');\r\n                    return Promise.resolve(response.data);\r\n                },\r\n                error => {\r\n                    commit('registerFailure');\r\n                    return Promise.reject(error);\r\n                }\r\n            );\r\n        }\r\n    },\r\n    mutations: {\r\n        loginSuccess(state, user) {\r\n            state.status.loggedIn = true;\r\n            state.user = user;\r\n        },\r\n        loginFailure(state) {\r\n            state.status.loggedIn = false;\r\n            state.user = null;\r\n        },\r\n        logout(state) {\r\n            state.status.loggedIn = false;\r\n            state.user = null;\r\n        },\r\n        registerSuccess(state) {\r\n            state.status.loggedIn = false;\r\n        },\r\n        registerFailure(state) {\r\n            state.status.loggedIn = false;\r\n        }\r\n    }\r\n};"]}]}