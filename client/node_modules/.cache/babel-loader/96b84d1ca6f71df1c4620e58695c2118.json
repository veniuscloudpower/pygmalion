{"remainingRequest":"C:\\projects\\kube-dashboard\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\projects\\kube-dashboard\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\projects\\kube-dashboard\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\projects\\kube-dashboard\\client\\node_modules\\vue-kanban\\src\\components\\Kanban.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\vue-kanban\\src\\components\\Kanban.vue","mtime":499162500000},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\projects\\kube-dashboard\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport dragula from 'dragula';\nimport { Machine } from 'xstate';\nexport default {\n  name: 'KanbanBoard',\n  props: {\n    stages: {\n      type: Array,\n      required: true\n    },\n    blocks: {\n      type: Array,\n      required: true\n    },\n    config: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    stateMachineConfig: {\n      type: Object,\n      default: null\n    },\n    idProp: {\n      type: String,\n      default: 'id'\n    },\n    statusProp: {\n      type: String,\n      default: 'status'\n    }\n  },\n  data: function data() {\n    return {\n      machine: null\n    };\n  },\n  computed: {\n    localBlocks: function localBlocks() {\n      return this.blocks;\n    }\n  },\n  methods: {\n    getBlocks: function getBlocks(status) {\n      var _this = this;\n\n      return this.localBlocks.filter(function (block) {\n        return block[_this.statusProp] === status;\n      });\n    },\n    findPossibleTransitions: function findPossibleTransitions(sourceState) {\n      return this.machine.config.states[sourceState].on || {};\n    },\n    findTransition: function findTransition(target, source) {\n      var targetState = target.dataset.status;\n      var sourceState = source.dataset.status;\n      var possibleTransitions = this.findPossibleTransitions(sourceState);\n      return Object.keys(possibleTransitions).find(function (transition) {\n        return possibleTransitions[transition] === targetState;\n      });\n    },\n    accepts: function accepts(block, target, source) {\n      if (!this.machine) return true;\n      var targetState = target.dataset.status;\n      var sourceState = source.dataset.status;\n      return Object.values(this.findPossibleTransitions(sourceState)).includes(targetState);\n    },\n    allowedTargets: function allowedTargets(el, source) {\n      var _this2 = this;\n\n      var block = this.localBlocks.find(function (b) {\n        return b[_this2.idProp] === el.dataset.blockId;\n      });\n      return this.drake.containers.filter(function (c) {\n        return _this2.config.accepts(block, c, source);\n      });\n    },\n    forbiddenTargets: function forbiddenTargets(el, source) {\n      var _this3 = this;\n\n      return this.drake.containers.filter(function (c) {\n        return !_this3.allowedTargets(el, source).includes(c);\n      });\n    }\n  },\n  updated: function updated() {\n    this.drake.containers = this.$refs.list;\n    this.drake.mirrorContainer = this.$el;\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.config.accepts = this.config.accepts || this.accepts;\n    this.config.mirrorContainer = this.$el;\n    this.drake = dragula(this.$refs.list, this.config).on('drag', function (el, source) {\n      _this4.$emit('drag', el, source);\n\n      el.classList.add('is-moving');\n\n      _this4.allowedTargets(el, source).forEach(function (c) {\n        return c.classList.add('allowed');\n      });\n\n      _this4.forbiddenTargets(el, source).forEach(function (c) {\n        return c.classList.add('forbidden');\n      });\n    }).on('dragend', function (el) {\n      _this4.$emit('dragend', el);\n\n      el.classList.remove('is-moving');\n\n      _this4.drake.containers.forEach(function (c) {\n        return c.classList.remove('allowed', 'forbidden');\n      });\n\n      window.setTimeout(function () {\n        el.classList.add('is-moved');\n        window.setTimeout(function () {\n          el.classList.remove('is-moved');\n        }, 600);\n      }, 100);\n    }).on('drop', function (block, list, source, sibling) {\n      _this4.$emit('drop', block, list, source, sibling);\n\n      var index = 0;\n\n      for (index = 0; index < list.children.length; index += 1) {\n        if (list.children[index].classList.contains('is-moving')) break;\n      }\n\n      var newState = list.dataset.status;\n\n      if (_this4.machine) {\n        var transition = _this4.findTransition(list, source);\n\n        if (!transition) return;\n        newState = _this4.machine.transition(source.dataset.status, transition).value;\n      }\n\n      _this4.$emit('update-block', block.dataset.blockId, newState, index);\n    }).on('cancel', function (el, container, source) {\n      _this4.$emit('cancel', el, container, source);\n    }).on('remove', function (el, container, source) {\n      _this4.$emit('remove', el, container, source);\n    }).on('shadow', function (el, container, source) {\n      _this4.$emit('shadow', el, container, source);\n    }).on('over', function (el, container, source) {\n      _this4.$emit('over', el, container, source);\n    }).on('out', function (el, container, source) {\n      _this4.$emit('out', el, container, source);\n    }).on('cloned', function (clone, original, type) {\n      _this4.$emit('cloned', clone, original, type);\n    });\n    this.$emit('init', this.drake);\n  },\n  created: function created() {\n    if (!this.stateMachineConfig) return;\n    this.machine = Machine(this.stateMachineConfig);\n  }\n};",{"version":3,"sources":["Kanban.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"drag-container\">\n    <ul class=\"drag-list\">\n      <li v-for=\"stage in stages\" class=\"drag-column\" :class=\"{['drag-column-' + stage]: true}\" :key=\"stage\">\n        <span class=\"drag-column-header\">\n          <slot :name=\"stage\">\n            <h2>{{ stage }}</h2>\n          </slot>\n        </span>\n        <div class=\"drag-options\"></div>\n        <ul class=\"drag-inner-list\" ref=\"list\" :data-status=\"stage\">\n          <li class=\"drag-item\" v-for=\"block in getBlocks(stage)\" :data-block-id=\"block[idProp]\" :key=\"block[idProp]\">\n            <slot :name=\"block[idProp]\">\n              <strong>{{ block[statusProp] }}</strong>\n              <div>{{ block[idProp] }}</div>\n            </slot>\n          </li>\n        </ul>\n        <div class=\"drag-column-footer\">\n            <slot :name=\"`footer-${stage}`\"></slot>\n        </div>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n  import dragula from 'dragula';\n  import { Machine } from 'xstate';\n\n  export default {\n    name: 'KanbanBoard',\n\n    props: {\n      stages: {\n        type: Array,\n        required: true,\n      },\n      blocks: {\n        type: Array,\n        required: true,\n      },\n      config: {\n        type: Object,\n        default: () => ({}),\n      },\n      stateMachineConfig: {\n        type: Object,\n        default: null,\n      },\n      idProp: {\n        type: String,\n        default: 'id',\n      },\n      statusProp: {\n        type: String,\n        default: 'status',\n      },\n    },\n\n    data() {\n      return {\n        machine: null,\n      };\n    },\n\n    computed: {\n      localBlocks() {\n        return this.blocks;\n      },\n    },\n\n    methods: {\n      getBlocks(status) {\n        return this.localBlocks.filter(block => block[this.statusProp] === status);\n      },\n\n      findPossibleTransitions(sourceState) {\n        return this.machine.config.states[sourceState].on || {};\n      },\n\n      findTransition(target, source) {\n        const targetState = target.dataset.status;\n        const sourceState = source.dataset.status;\n        const possibleTransitions = this.findPossibleTransitions(sourceState);\n        return Object.keys(possibleTransitions)\n          .find(transition => possibleTransitions[transition] === targetState);\n      },\n\n      accepts(block, target, source) {\n        if (!this.machine) return true;\n        const targetState = target.dataset.status;\n        const sourceState = source.dataset.status;\n        return Object.values(this.findPossibleTransitions(sourceState)).includes(targetState);\n      },\n\n      allowedTargets(el, source) {\n        const block = this.localBlocks.find(b => b[this.idProp] === el.dataset.blockId);\n        return this.drake.containers.filter(c => this.config.accepts(block, c, source));\n      },\n\n      forbiddenTargets(el, source) {\n        return this.drake.containers.filter(c => !this.allowedTargets(el, source).includes(c));\n      },\n    },\n\n    updated() {\n      this.drake.containers = this.$refs.list;\n      this.drake.mirrorContainer = this.$el;\n    },\n\n    mounted() {\n      this.config.accepts = this.config.accepts || this.accepts;\n      this.config.mirrorContainer = this.$el;\n      this.drake = dragula(this.$refs.list, this.config)\n      .on('drag', (el, source) => {\n        this.$emit('drag', el, source);\n        el.classList.add('is-moving');\n        this.allowedTargets(el, source).forEach(c => c.classList.add('allowed'));\n        this.forbiddenTargets(el, source).forEach(c => c.classList.add('forbidden'));\n      })\n      .on('dragend', (el) => {\n        this.$emit('dragend', el);\n        el.classList.remove('is-moving');\n        this.drake.containers.forEach(c => c.classList.remove('allowed', 'forbidden'));\n        window.setTimeout(() => {\n          el.classList.add('is-moved');\n          window.setTimeout(() => {\n            el.classList.remove('is-moved');\n          }, 600);\n        }, 100);\n      })\n      .on('drop', (block, list, source, sibling) => {\n        this.$emit('drop', block, list, source, sibling);\n        let index = 0;\n        for (index = 0; index < list.children.length; index += 1) {\n          if (list.children[index].classList.contains('is-moving')) break;\n        }\n\n        let newState = list.dataset.status;\n\n        if (this.machine) {\n          const transition = this.findTransition(list, source);\n          if (!transition) return;\n          newState = this.machine.transition(source.dataset.status, transition).value;\n        }\n\n        this.$emit('update-block', block.dataset.blockId, newState, index);\n      })\n      .on('cancel', (el, container, source) => {\n        this.$emit('cancel', el, container, source);\n      })\n      .on('remove', (el, container, source) => {\n        this.$emit('remove', el, container, source);\n      })\n      .on('shadow', (el, container, source) => {\n        this.$emit('shadow', el, container, source);\n      })\n      .on('over', (el, container, source) => {\n        this.$emit('over', el, container, source);\n      })\n      .on('out', (el, container, source) => {\n        this.$emit('out', el, container, source);\n      })\n      .on('cloned', (clone, original, type) => {\n        this.$emit('cloned', clone, original, type);\n      });\n      this.$emit('init', this.drake);\n    },\n\n    created() {\n      if (!this.stateMachineConfig) return;\n      this.machine = Machine(this.stateMachineConfig);\n    },\n  };\n</script>\n"],"sourceRoot":"node_modules/vue-kanban/src/components"}]}